
        AREA    |Test$$Code|, CODE

        GET     hdr.swis
        GET     hdr.printmacros
        GET     hdr.macros
        GET     hdr.envnumbers


env_callback ROUT
        Push    "lr"
        STR     r12, my_r12

        PrintLine "Read old Callback handler"

        XSWI    OS_ChangeEnvironment, #CallBackHandler, 0, 0, 0
        STR     r1, old_handler
        STR     r2, old_handlerws
        STR     r3, old_buffer

        BL      print_handler

        PrintLine "Set callback handler"
        XSWI    OS_ChangeEnvironment, #CallBackHandler, ^myhandler, #&77, ^mybuffer
        BL      print_handler

        PrintLine "Read the current handler"

        XSWI    OS_ChangeEnvironment, #CallBackHandler, 0, 0, 0
        BL      print_handler

        SWI     OS_SetCallBack

        PrintLine "ERROR: OS_SetCallBack returned?!"
        Pull    "pc"


myhandler SIGNATURE
        ADRL    sp, small_stack
        MOV     r0, r12
        LDR     r12, my_r12
        TEQ     r12, #0
        BNE     %FT10
; have been reentered
        SWI     OS_WriteS
        = "My callback handler was reentered. Aborting now.",0
        SWI     OS_NewLine
        MOV     r0, #&8800000
        LDR     r0, [r0]                    ; hopefully memory that does not exist

10
        PrintLine "Entered my callback handler"
        MRS     r1, CPSR                    ; should be IRQ32/SVC32 mode at this point
        PrintMessage "CPSR:", 12
        PrintHex r1
        SWI     OS_NewLine

        PrintMessage "R12:", 12
        PrintHex r0
        SWI     OS_NewLine
        SWI     OS_NewLine

        PrintLine "Restoring original callback handler"

        LDR     r1, old_handler
        LDR     r2, old_handlerws
        LDR     r3, old_buffer
        XSWI    OS_ChangeEnvironment, #CallBackHandler

        BL      print_handler

        PrintLine "Dropping to USR32"

        MRS     r1, CPSR
        BIC     r1, r1, #&1f
        ORR     r1, r1, #&10
        MSR     CPSR_c, r1                  ; switch back to USR32

        SWI     OS_NewLine
; After this SWI, if the OS_ChangeEnvironment call was not effective, we would reenter our
; handler, which should then abort.

        PrintLine "In USR32"

        MOV     r0, #0
        STR     r0, my_r12                  ; flag that we're now done with this handler
                                            ; if we're called again, we'll intentionally
                                            ; access invalid memory and hope that the abort
                                            ; exits us more cleanly.

        PrintLine "OS_SetCallBack should not enter my handler"
        SWI     OS_SetCallBack

        PrintLine "OS_Exit should now exit our application"

        SWI     OS_Exit
        PrintLine "OS_Exit didn't exit. Aborting now."
        MOV     r0, #&8800000
        LDR     r0, [r0]                    ; hopefully memory that does not exist


print_handler SIGNATURE
        Push    "lr"
        PrintMessage "Handler:", 12
        PrintHex r1
        SWI     OS_NewLine

        PrintMessage "Workspace:", 12
        PrintHex r2
        SWI     OS_NewLine

        PrintMessage "Buffer:", 12
        PrintHex r3
        SWI     OS_NewLine

        SWI     OS_NewLine
        Pull    "pc"





; data
old_handler
        DCD     0
old_handlerws
        DCD     0
old_buffer
        DCD     0
my_r12
        DCD     0

mybuffer
        %       4*17

small_stack_base
        %       256
small_stack

        END
